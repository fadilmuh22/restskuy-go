basePath: /api
consumes:
    - application/json
definitions:
    ClaimStrings:
        description: |-
            ClaimStrings is basically just a slice of strings, but it can be either
            serialized from a string array or just a string. This type is necessary,
            since the "aud" claim can either be a single string or an array.
        items:
            type: string
        type: array
        x-go-package: github.com/golang-jwt/jwt/v5
    Product:
        properties:
            ID:
                format: uuid
                type: string
            description:
                type: string
                x-go-name: Description
            name:
                type: string
                x-go-name: Name
            price:
                format: double
                type: number
                x-go-name: Price
            stock:
                format: int64
                type: integer
                x-go-name: Stock
            user:
                $ref: '#/definitions/User'
            user_id:
                format: uuid
                type: string
                x-go-name: UserID
        type: object
        x-go-package: github.com/fadilmuh22/restskuy/internal/model
    User:
        properties:
            ID:
                format: uuid
                type: string
            email:
                type: string
                x-go-name: Email
            is_admin:
                type: boolean
                x-go-name: IsAdmin
            name:
                type: string
                x-go-name: Name
            password:
                type: string
                x-go-name: Password
            products:
                items:
                    $ref: '#/definitions/Product'
                type: array
                x-go-name: Products
        type: object
        x-go-package: github.com/fadilmuh22/restskuy/internal/model
info:
    description: Documentation of our restskuy API.
    title: restskuy.
    version: 1.0.0
paths:
    /auth/login:
        post:
            operationId: login
            parameters:
                - in: body
                  name: Body
                  schema:
                    properties:
                        email:
                            description: The username
                            type: string
                            x-go-name: Email
                        password:
                            description: The password
                            type: string
                            x-go-name: Password
                    required:
                        - email
                        - password
                    type: object
            responses:
                "200":
                    $ref: '#/responses/loginRegisterResponse'
            summary: Login.
            tags:
                - auth
    /auth/me:
        get:
            operationId: me
            responses:
                "200":
                    $ref: '#/responses/meResponse'
            summary: Get current user.
            tags:
                - auth
    /auth/register:
        post:
            operationId: register
            parameters:
                - in: body
                  name: Body
                  schema:
                    properties:
                        email:
                            type: string
                            x-go-name: Email
                        is_admin:
                            type: boolean
                            x-go-name: IsAdmin
                        name:
                            type: string
                            x-go-name: Name
                        password:
                            type: string
                            x-go-name: Password
                    type: object
            responses:
                "200":
                    $ref: '#/responses/loginRegisterResponse'
            summary: Register.
            tags:
                - auth
    /product:
        get:
            operationId: listProducts
            responses:
                "200":
                    $ref: '#/responses/productsResponse'
            summary: List all products.
            tags:
                - product
        post:
            operationId: createProduct
            parameters:
                - in: body
                  name: Body
                  schema:
                    properties:
                        description:
                            type: string
                            x-go-name: Description
                        name:
                            type: string
                            x-go-name: Name
                        price:
                            format: double
                            type: number
                            x-go-name: Price
                        stock:
                            format: int64
                            type: integer
                            x-go-name: Stock
                    type: object
            responses:
                "200":
                    $ref: '#/responses/productResponse'
            summary: Create a new product.
            tags:
                - product
    /product/{id}:
        delete:
            operationId: deleteProduct
            parameters:
                - format: int64
                  in: path
                  name: id
                  required: true
                  type: integer
                  x-go-name: ID
            responses:
                "200":
                    $ref: '#/responses/productResponse'
            summary: Delete a product by id.
            tags:
                - product
        get:
            operationId: getProduct
            parameters:
                - format: int64
                  in: path
                  name: id
                  required: true
                  type: integer
                  x-go-name: ID
            responses:
                "200":
                    $ref: '#/responses/productResponse'
            summary: Get a product by id.
            tags:
                - product
        put:
            operationId: updateProduct
            parameters:
                - format: uuid
                  in: path
                  name: id
                  required: true
                  type: string
                  x-go-name: ID
                - in: body
                  name: Body
                  schema:
                    properties:
                        description:
                            type: string
                            x-go-name: Description
                        name:
                            type: string
                            x-go-name: Name
                        price:
                            format: double
                            type: number
                            x-go-name: Price
                        stock:
                            format: int64
                            type: integer
                            x-go-name: Stock
                    type: object
            responses:
                "200":
                    $ref: '#/responses/productResponse'
            summary: Update a product by id.
            tags:
                - product
    /user:
        get:
            operationId: listUsers
            responses:
                "200":
                    $ref: '#/responses/usersResponse'
            summary: List all users.
            tags:
                - user
        post:
            operationId: createUser
            parameters:
                - in: body
                  name: Body
                  schema:
                    properties:
                        email:
                            type: string
                            x-go-name: Email
                        is_admin:
                            type: boolean
                            x-go-name: IsAdmin
                        name:
                            type: string
                            x-go-name: Name
                        password:
                            type: string
                            x-go-name: Password
                    type: object
            responses:
                "200":
                    $ref: '#/responses/userResponse'
            summary: Create a new user.
            tags:
                - user
    /user/{id}:
        delete:
            operationId: deleteUser
            parameters:
                - format: uuid
                  in: path
                  name: id
                  required: true
                  type: string
                  x-go-name: ID
            responses:
                "200":
                    $ref: '#/responses/userResponse'
            summary: Delete a user by id.
            tags:
                - user
        get:
            operationId: getUser
            parameters:
                - format: uuid
                  in: path
                  name: id
                  required: true
                  type: string
                  x-go-name: ID
            responses:
                "200":
                    $ref: '#/responses/userResponse'
            summary: Get a user by id.
            tags:
                - user
        put:
            operationId: updateUser
            parameters:
                - format: uuid
                  in: path
                  name: id
                  required: true
                  type: string
                  x-go-name: ID
                - in: body
                  name: Body
                  schema:
                    properties:
                        email:
                            type: string
                            x-go-name: Email
                        is_admin:
                            type: boolean
                            x-go-name: IsAdmin
                        name:
                            type: string
                            x-go-name: Name
                        password:
                            type: string
                            x-go-name: Password
                    type: object
            responses:
                "200":
                    $ref: '#/responses/userResponse'
            summary: Update a user by id.
            tags:
                - user
produces:
    - application/json
responses:
    loginRegisterResponse:
        description: ""
        schema:
            properties:
                data:
                    properties:
                        token:
                            description: The token
                            type: string
                            x-go-name: Token
                        user:
                            $ref: '#/definitions/User'
                    type: object
                    x-go-name: Data
                message:
                    type: string
                    x-go-name: Message
                status:
                    type: boolean
                    x-go-name: Success
            type: object
    meResponse:
        description: ""
        schema:
            properties:
                data:
                    properties:
                        ID:
                            format: uuid
                            type: string
                        aud:
                            $ref: '#/definitions/ClaimStrings'
                        email:
                            type: string
                            x-go-name: Email
                        exp:
                            description: the `exp` (Expiration Time) claim. See https://datatracker.ietf.org/doc/html/rfc7519#section-4.1.4
                            type: string
                            x-go-name: ExpiresAt
                        iat:
                            description: the `iat` (Issued At) claim. See https://datatracker.ietf.org/doc/html/rfc7519#section-4.1.6
                            type: string
                            x-go-name: IssuedAt
                        is_admin:
                            type: boolean
                            x-go-name: IsAdmin
                        iss:
                            description: the `iss` (Issuer) claim. See https://datatracker.ietf.org/doc/html/rfc7519#section-4.1.1
                            type: string
                            x-go-name: Issuer
                        jti:
                            description: the `jti` (JWT ID) claim. See https://datatracker.ietf.org/doc/html/rfc7519#section-4.1.7
                            type: string
                            x-go-name: ID
                        name:
                            type: string
                            x-go-name: Name
                        nbf:
                            description: the `nbf` (Not Before) claim. See https://datatracker.ietf.org/doc/html/rfc7519#section-4.1.5
                            type: string
                            x-go-name: NotBefore
                        password:
                            type: string
                            x-go-name: Password
                        products:
                            items:
                                $ref: '#/definitions/Product'
                            type: array
                            x-go-name: Products
                        sub:
                            description: the `sub` (Subject) claim. See https://datatracker.ietf.org/doc/html/rfc7519#section-4.1.2
                            type: string
                            x-go-name: Subject
                        uuid:
                            format: uuid
                            type: string
                            x-go-name: ID
                    type: object
                    x-go-name: Data
                message:
                    type: string
                    x-go-name: Message
                status:
                    type: boolean
                    x-go-name: Success
            type: object
    productResponse:
        description: ""
        schema:
            properties:
                data:
                    $ref: '#/definitions/Product'
                    x-go-name: Data
                message:
                    type: string
                    x-go-name: Message
                status:
                    type: boolean
                    x-go-name: Success
            type: object
    productsResponse:
        description: ""
        schema:
            properties:
                data:
                    items:
                        $ref: '#/definitions/Product'
                    type: array
                    x-go-name: Data
                message:
                    type: string
                    x-go-name: Message
                status:
                    type: boolean
                    x-go-name: Success
            type: object
    userResponse:
        description: ""
        schema:
            properties:
                data:
                    $ref: '#/definitions/User'
                    x-go-name: Data
                message:
                    type: string
                    x-go-name: Message
                status:
                    type: boolean
                    x-go-name: Success
            type: object
    usersResponse:
        description: ""
        schema:
            properties:
                data:
                    items:
                        $ref: '#/definitions/User'
                    type: array
                    x-go-name: Data
                message:
                    type: string
                    x-go-name: Message
                status:
                    type: boolean
                    x-go-name: Success
            type: object
security:
    - api_key: []
securityDefinitions:
    api_key:
        in: header
        name: Authorization
        type: apiKey
swagger: "2.0"
